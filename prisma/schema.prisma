// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

/**
 * =========================
 * NextAuth base models
 * =========================
 */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  // NOTE: mapped legacy field
  onboarded Boolean @default(false) @map("onboardingComplete")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  // NEW: OAuth Connections owned by this user (Meta/Google Ads tokens)
  connections Connection[]

  // (Optional) who attached an ad account (see AdAccount.connectedBy)
  adAccountsConnected AdAccount[] @relation("AdAccountConnectedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * =========================
 * Existing product models
 * =========================
 */

model DigestRun {
  id      String   @id @default(cuid())
  company String?
  email   String?
  env     String
  mode    String // "cron" | "manual" | "preview"
  date    DateTime @default(now())
  alerts  Int
  success Boolean
  error   String?
}

model Company {
  id              String  @id @default(cuid())
  name            String?
  timezone        String? @default("Asia/Kolkata")
  slackWebhookUrl String?
  sheetCsvUrl     String?

  // prefs...
  minSeverity     String  @default("OK")
  quietHoursStart String? @default("21:00")
  quietHoursEnd   String? @default("07:00")
  digestHourLocal Int?    @default(9)

  summaryWebhookUrl String?
  brandWebhookUrls  Json?

  // ✅ Currency for budgets/spend
  currencyCode String @default("USD")

  // ✅ Guardrail cap (per day, Meta)
  dailyMetaCap Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        User[]
  deliveryLogs DeliveryLog[]
  brands       Brand[]
}

model DeliveryLog {
  id        String   @id @default(cuid())
  companyId String?
  email     String?
  channel   String // "slack" | "email"
  status    String // "sent" | "skipped" | "failed"
  reason    String? // details when skipped/failed
  env       String
  dry       Boolean
  createdAt DateTime @default(now())

  company Company? @relation(fields: [companyId], references: [id])

  @@index([companyId, createdAt])
}

/**
 * =========================
 * NEW for multi-brand + integrations
 * =========================
 */

// Brand = workspace (e.g., "Nike US"). Users switch active Brand in UI.
// Each Brand can have multiple ad accounts across providers.
model Brand {
  id           String @id @default(cuid())
  companyId    String
  name         String
  currencyCode String @default("USD")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company    Company     @relation(fields: [companyId], references: [id])
  adAccounts AdAccount[]

  @@unique([companyId, name]) // prevent duplicate brand names per company
  @@index([companyId])
}

// Connection = OAuth grant per user/provider (Meta/Google Ads)
// Separate from NextAuth.Account so you control scopes/rotation distinctly.
model Connection {
  id           String    @id @default(cuid())
  userId       String
  provider     String // "meta" | "google_ads"
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scope        String?
  profileJson  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([provider])
}

// AdAccount = provider account attached to a Brand
// e.g., provider="meta", externalId="act_1234567890"; provider="google_ads", externalId="1234567890"
model AdAccount {
  id          String  @id @default(cuid())
  brandId     String
  provider    String
  externalId  String
  name        String
  currency    String?
  connectedBy String? // User.id who attached this account

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand Brand @relation(fields: [brandId], references: [id])

  // Who connected it (optional)
  connectedByUser User? @relation("AdAccountConnectedBy", fields: [connectedBy], references: [id])

  @@unique([provider, externalId]) // de-dupe same account across users/brands
  @@index([brandId])
}
